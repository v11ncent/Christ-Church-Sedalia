---
interface Props {
  variant: "primary" | "secondary" | "tertiary" | "no-decoration";
  text: string;
  to: string;
  external?: boolean;
}

const { variant, to, text, external = false } = Astro.props;
const externalProps = external ? { target: "_blank", rel: "noopener" } : {};
---

{
  (() => {
    if (variant === "primary") {
      return (
        <a href={to} class="primary link" {...externalProps}>
          {text}
        </a>
      );
    } else if (variant === "secondary") {
      return (
        <a href={to} class="secondary link" {...externalProps}>
          {text}
        </a>
      );
    } else if (variant === "tertiary") {
      return (
        <a href={to} class="tertiary link" {...externalProps}>
          {text}
        </a>
      );
    } else if (variant === "no-decoration") {
      return (
        <a href={to} class="no-decoration link" {...externalProps}>
          {text}
        </a>
      );
    }
  })()
}

<style lang="scss">
  @use "../styles/tokens/tokens" as t;

  a {
    display: block;
    width: 100%;
    padding: 0.75rem 2rem;
    text-align: center;
    text-decoration: none;
    border-radius: 0.3125rem 1.875rem 0.3125rem 1.875rem;
    font-family: t.$ff-poppy;
    font-weight: 500;
    font-size: inherit;

    @media (min-width: 31.25rem) {
      max-width: fit-content;
    }
  }

  .primary {
    color: t.$clr-black;
    background-color: white;
  }

  .secondary {
    color: white;
    border: 0.0938rem solid white;
  }

  .tertiary {
    color: t.$clr-black;
    border: 0.0938rem solid t.$clr-black;
    position: relative;
    transition: all 0.3s cubic-bezier(0.785, 0.135, 0.15, 0.86);

    &:hover {
      transform: translate(-2px, -2px);
    }
  }

  .no-decoration {
    color: t.$clr-black;
  }
</style>
